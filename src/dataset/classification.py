import numpy as np


def generate_classification_dataset(
    n_samples=100, n_features=2, n_classes=2, random_state=None
):
    """
    Generate a synthetic classification dataset.

    The dataset is generated by creating random centroids for each class and then
    adding normally distributed data around these centroids.

    Parameters
    ----------
    n_samples : int, optional
        The number of samples to generate (default is 100).
    n_features : int, optional
        The number of features for each sample (default is 2).
    n_classes : int, optional
        The number of distinct classes or centroids (default is 2).
    random_state : int, optional
        The seed used by the random number generator (default is None).

    Returns
    -------
    tuple of np.ndarray
        X : np.ndarray
            The generated samples.
        y : np.ndarray
            The class labels for each sample.
    """
    np.random.seed(random_state)
    centroids = np.random.rand(n_classes, n_features)
    X, y = [], []
    for _ in range(n_samples):
        class_label = np.random.randint(0, n_classes)
        sample = centroids[class_label] + 0.1 * np.random.randn(n_features)
        X.append(sample)
        y.append(class_label)
    return np.array(X), np.array(y)
